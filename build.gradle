apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

checkstyle {
    toolVersion = "6.7"
}

findbugs {
  ignoreFailures = true
  sourceSets = [sourceSets.main]
  effort = "max"
}

pmd {
  ignoreFailures = true
  sourceSets = [sourceSets.main]
}

test {
  reports.junitXml.destination = file('build/reports/tests')
}

sourceSets {
  main {
        java {
            srcDir 'cases/src'
            srcDir 'backend/src'
            srcDir 'core'
            srcDir 'modern'
            srcDir 'api'
            srcDir 'util/src'
        }
        resources {
            srcDir 'cases/resources'
        }
  }
    api {
        java {
            srcDir 'api'
            compileClasspath += main.output
        }
    }
  test {
      java {
          compileClasspath += main.output
          srcDir 'tests/test'
          srcDir 'api'
      }
      resources{
          srcDir 'tests/resources'
      }
  }

  cli {
      java {
          compileClasspath += main.output
          compileClasspath += api.output
          srcDir 'util/src'
      }
  }
}

dependencies {
    compile project(':javarosa')
    compile 'org.xerial:sqlite-jdbc:3.8.11.1'
    compile 'org.json:json:20140107'
    cliCompile project(path: ':javarosa', configuration: 'harness')
    cliCompile 'commons-cli:commons-cli:1.3.1'
    testCompile sourceSets.main.output
    testCompile sourceSets.api.output
    testCompile sourceSets.cli.output
    testCompile 'junit:junit:4.+'
    testCompile 'org.json:json:20140107'
    testCompile 'org.xerial:sqlite-jdbc:3.8.11.1'
    apiCompile sourceSets.main.output
    apiCompile project(path: ':javarosa')
    apiCompile 'org.xerial:sqlite-jdbc:3.8.11.1'
    apiCompile 'org.json:json:20140107'
}

jar {
    baseName = "commcare-libraries"
}

jar.dependsOn test

configurations {
  cliOutput.extendsFrom (cliCompile)
}

task cliJar(type: Jar, dependsOn: cliClasses) {
    baseName = "commcare-cli"
    from sourceSets.cli.output
    from sourceSets.main.output
    from {
        configurations.cliCompile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.cliRuntime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes 'Main-Class': 'org.commcare.util.cli.CliMain'
    }
    
}

task apiJar(type: Jar, dependsOn: apiClasses) {
    baseName = "commcare-api"
    from sourceSets.api.output
    from sourceSets.main.output
    from {
        configurations.apiCompile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.apiRuntime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

}

artifacts {
  cliOutput cliJar
}

task copyTestResources(type: Copy) {
    from sourceSets.test.resources
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

task jenkinsTest {
    inputs.files test.outputs.files
    doLast {
        def timestamp = System.currentTimeMillis()
        test.getReports().getJunitXml().getDestination().eachFile { it.lastModified = timestamp }
    }
}

check.dependsOn(jenkinsTest)
