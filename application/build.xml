<!-- The JavaRosa build script is structured as follows:
     Modifiable properties are stored in the external build.properties file
     The classpath for external jars is defined in the Build taskdef
     
     NOTE: Binary Libraries (.zip is the convention in j2me) are declared 
     seperately in the binaryLibraries property. Not on the classpath!
     
     The BuildPolish target is associated with building the jar/jad files
     
     All other non-test targets essentially modify properties associated with the
     Build target
-->
<project name="CommCare" default="LaunchEmulator">
	<!-- Main Target: Call to build the project -->
	<!-- This is the main work target, it actually builds the code -->
	<target name="BuildPolish" depends="init, CompileAndLinkSource, UpdateBuildNumber, SetDefaults" description="This is the controller for the J2ME build process.">
		
		<!-- Definition of the J2ME Polish task:                      -->
		<taskdef name="buildPolish" classname="de.enough.polish.ant.PolishTask" classpath="${dir.tools}/j2merosa-libraries.jar:${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar:${polish.home}/lib/j2me-lib_1.1.jar:${polish.home}/lib/microewt_0.92.jar:${polish.home}/lib/microEWT-Examples.jar:${polish.home}/import/nokia-ui.jar:${polish.home}/import/m3g.jar:${polish.home}}/import/btapi.jar:${wtk.home}/lib/jsr082.jar:${wtk.home}/lib/jsr82.jar:${polish.home}/import/cldc-1.1-java5.jar:${polish.home}/import/enough-j2mepolish-client-java5.jar" />
			<path id="classpath.base">
		</path>
		
		<!-- A property containing the path to the preprocessed source files -->
		<property name="builtsource" value="${dir.build}/real/${device.identifier}/none/source/" />
		
		<!-- extract shared resources for j2merosa lib -->
		<unzip src="${dir.tools}/j2merosa-libraries.jar" dest="${dir.build}">
		    <patternset>
        		<include name="resources/*"/>
		    </patternset>
		</unzip>
		
		<buildPolish>
			<info name="${app.name}" 
				version="${app.version}" 
				description="${app.description}" 
				vendorName="${app.vendor}" 
				infoUrl="${app.infoUrl}" 
				jarName="${app.jarName}" 
				jarUrl="${deploy-url}${app.jarName}" copyright="" />
			
			<!-- selection of supported devices, set this in build.properties -->
			<deviceRequirements>
				<requirement name="Identifier" value="${device.identifier}" />
			</deviceRequirements>

			<!-- build settings -->
			<!-- 'menu' here designates that we're using the fullscreen Polish UI with native menus -->
			<!-- We should see if we can set these first two attributes as properties instead-->
			<build fullscreen="menu" 
				usePolishGui="${javarosa.usepolishui}" 
				workDir="${dir.work}" 
				destDir="${dir.dist}">
				
				<libraries>
					<library dir="${dir.lib}" />
			<!--		<library file="${dir.tools}/j2meunit-javarosa.jar" if="unittests" />  -->
				</libraries>
				
				<jad>
					<attribute name="App-Version" value="${commcare.version}/${commcare.flavor}" />
					<attribute name="CC-Deploy-Build-Version" value="${cc-deploy-build-version}" />
					<attribute name="CC-Core-Build-Version" value="${cc-core-build-version}" />
					<attribute name="JR-Build-Version" value="${jr-build-version}" />
					<attribute name="Polish-Device" value="${device.identifier}" />
					<attribute name="Built-on" value="${built-on}" />
					
					<attribute name="CommCare-ShowReminders" value="${commcare.show.reminders}" />
					<attribute name="CommCare-Release"	value="${commcare.release}" />
				</jad>

				<!-- midlets definition -->
				<midlet class="${app.class}" name="${app.name}" />
				
				<!-- Code source files to include in compilation -->
				<!-- All source-level inclusions should be made here -->
				<sources>
					<source dir="${dir.src}"/>
					<source dir="${dir.commcare-core}/org.commcare.core/src/"/>

					<!--Taking this out for now...-->
					<!--source dir="${dir.test}"/-->
				</sources>
				
				<!-- Build variables -->
				<variables includeAntProperties="true">
					<variable file="configuration/configuration.properties" />
				</variables>

				<!-- Resources that should be used in the Polish build (images, the polish.css file, etc) --> 
                <resources defaultexcludes="no" excludes="readme.txt">
                    <root dir="${dir.resources-external}" />
                    <root dir="${dir.resources}" />
                    <!-- Set the language for the strings in the application -->
                    <localization>
                        <locale name="none" />
                    </localization>
                </resources>


				<!-- Whether to run the obfuscator, which makes reverse engineering the byte-code
					 more difficult, and compresses the built JAR -->
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test or noobfuscate">
				<!--obfuscator name="ProGuard"-->
					<parameter name="optimize" value="true" />
					<!-- removing until there's a fix -->
					<parameter name="printmapping" value="'${dir.dist}/obfuscation_mapping.txt'"/>
					
					<!-- none of the parameter names below can be the same, or else they will clobber previous parameters; hence the varied spacing -->
					<parameter name="keep,allowshrinking" value="!abstract class org.javarosa.core.model.* implements org.javarosa.core.model.IFormElement" />
					<parameter name="keep, allowshrinking" value="!abstract class org.javarosa.core.model.instance.* implements org.javarosa.core.model.IFormDataModel" />
					<parameter name="keep ,allowshrinking" value="!abstract class org.javarosa.core.model.instance.* extends org.javarosa.core.model.instance.TreeElement" />
					<parameter name="keep,  allowshrinking" value="class org.javarosa.core.model.instance.TreeElement" /> <!-- needed to avoid preverify error -->
					<parameter name="keep , allowshrinking" value="!abstract class org.javarosa.core.model.data.* implements org.javarosa.core.model.data.IAnswerData" />
					<parameter name="keep  ,allowshrinking" value="!abstract class org.javarosa.model.xform.* implements org.javarosa.core.model.IDataReference" />
					<parameter name="keep,   allowshrinking" value="!abstract class org.javarosa.xpath.* implements org.javarosa.core.model.condition.IConditionExpr" />
					<parameter name="keep ,  allowshrinking" value="!abstract class org.javarosa.xpath.expr.* extends org.javarosa.xpath.expr.XPathExpression" />
					<parameter name="keep  ,  allowshrinking" value="!abstract class org.javarosa.communication.http.* implements org.javarosa.core.services.transport.ITransportDestination"/>
					<parameter name="keep " value="!abstract class org.javarosa.** implements org.javarosa.core.services.transport.IDataPayload"/>
					<parameter name="keep,    allowShrinking" value="!abstract class org.javarosa.** implements org.javarosa.core.services.transport.IDataPayload"/>
					<parameter name="keep  " value="!abstract class org.javarosa.** implements org.javarosa.core.data.IDataPointer"/>
					<parameter name="keep,     allowShrinking" value="!abstract class org.javarosa.** implements org.javarosa.core.data.IDataPointer"/>
					<parameter name="keep    ,   allowshrinking" value="class org.javarosa.model.GraphDataGroup" />
					<parameter name="keep   ,     allowShrinking" value="!abstract class org.javarosa.** implements org.javarosa.core.services.locale.LocaleDataSource"/>
					<parameter name="keep        ,       allowShrinking" value="class * implements org.javarosa.services.transport.TransportMessage"/>
					<parameter name="keep       ,         allowShrinking" value="class * implements org.javarosa.core.services.storage.WrappingStorageUtility.SerializationWrapper"/>
				</obfuscator>

				<!-- log settings: only use debug setting when the test-property is true -->
				<debug if="test" showLogOnError="true" verbose="true" level="error">
					<filter pattern="org.celllife.clforms.*" level="debug" />
				</debug>
				<!-- Properties of the actual javac compiler -->
				<compiler debug="on" classpath="${polish.home}/import/enough-j2mepolish-client.jar:${polish.home}/import/fileconnection.jar:${polish.home}/import/j2me-lib_1.1.jar:${polish.home}/import/nokia-ui.jar:${polish.home}/import/m3g.jar:${polish.home}/import/wmapi.jar:${wtk.home}/lib/jsr082.jar:${polish.home}}/import/btapi.jar:${wtk.home}/lib/jsr82.jar:${wtk.home}/lib/jsr75.jar"/>

				<postcompiler name="java5" />					

			</build>

			<!-- execution of emulator(s) -->
			<!-- Target one: Run emulator and profiling tools if debugging is enabled -->
			<emulator wait="true" securityDomain="trusted" enableProfiler="true" enableMemoryMonitor="true" enableNetworkMonitor="false" if="debug">
				<!-- Enable the following line to test memory constraints on the device -->
				<!--parameter name="-Xheapsize" value="850000"/-->
			</emulator>

			<!-- Target two: Run emulator only, with no profiling tools if debugging is disabled but testing is -->
			<emulator wait="true" trace="none" securityDomain="trusted" enableProfiler="false" enableMemoryMonitor="false" enableNetworkMonitor="false" if="test and not debug">
				<!-- Enable the following line to test memory constraints on the device -->
				<!--parameter name="-Xheapsize" value="850000"/-->
			</emulator>


		</buildPolish>
	</target>

	<target name="SetDefaults" description="Uses the defaults from the build.properties if nothing has previously set the properties">
		<condition property="commcare.release" value="${commcare.default.release}">
			<not>
				<isset property="commcare.release"/>
			</not>
		</condition>
		<condition property="commcare.show.reminders" value="${commcare.default.show.reminders}">
			<not>
				<isset property="commcare.show.reminders"/>
			</not>
		</condition>
		<echo message="CommCare Release: ${commcare.release}" />
		<echo message="CommCare show reminders: ${commcare.show.reminders}" />
	</target>
	
	<target name="UpdateBuildNumber" description="Get the revision numbers of the various things from mercurial">
		<exec executable="hg" outputproperty="cc-deploy-build-version">
			<arg line="parents --template {node|short}"/>
		</exec>
		<exec executable="hg" outputproperty="cc-core-build-version">
			<arg line="parents --template {node|short} -R &quot;${dir.commcare-core}&quot;"/>
		</exec>

	    <taskdef name="if" onerror="report" classname="net.sf.antcontrib.logic.IfTask" classpath="${dir.tools}/ant-contrib.jar" />
		<if>
			<equals arg1="${compile.source}" arg2="true" />
			<then>
				<exec executable="hg" outputproperty="jr-build-version">
					<arg line="parents --template {node|short} -R &quot;${dir.javarosa}&quot;"/>
				</exec>
			</then>
			<else>
				<unzip src="${dir.tools}/j2merosa-libraries.jar" dest="${dir.build}">
				    <patternset>
				        <include name="javarosa.properties"/>
				    </patternset>
				</unzip>
				<property file="${dir.build}/javarosa.properties" /> 
			</else>
		</if>
		
		<tstamp><format property="built-on" pattern="yyyy-MMM-dd HH:mm" timezone="UTC" /></tstamp>
 	</target>
	
	<target name="CompileAndLinkSource" if="compile.from.source.true">
		<ant antfile="${dir.jrlibs}/build.xml" target="package" inheritAll="false" inheritRefs="false">
			<property name="polish.home" value="${polish.home}"/>
		</ant>
		<copy file="${dir.jrlibs}/dist/j2merosa-libraries.jar" todir="${dir.tools}"/>
	</target>
	
	<!-- Main Target: Call to build the project and call up the emulator -->
	<!-- Builds the code and invokes the emulator -->
	<target name="LaunchEmulator" depends="enableEmulator,disableObfuscator,BuildPolish" description="invokes the emulator">
	</target>

	<!-- Main Target: Set for release, clean and build with obfuscator -->
	<target name="LaunchReleaseEmulator" depends="SetRelease, LaunchEmulator" />

	
	<!-- Main Target: Call to clean directories created by a build -->
	<target name="Clean" description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" />
	</target>

	<target name="SetRelease" >
		<property name="commcare.release" value="true" />
		<echo>setting commcare.release to ${commcare.release}</echo>
	</target>
	
	<target name="SetNoReminders" >
		<property name="commcare.show.reminders" value="false" />
		<echo>setting commcare.show.reminders to ${commcare.show.reminders}</echo>
	</target>

	
	<!-- Main Target: Set for MVPTZ release, clean and build with obfuscator -->
	<target name="BuildRelease" description="Build a release" depends="SetRelease, BuildClean" />
	
	<!-- Main Target: Cleans, and then runs the build target -->
	<target name="BuildClean" description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml" depends="Clean, BuildPolish" />
	
	<!-- Main Target: Cleans, and then runs the build target with the emulator -->
	<target name="BuildCleanRunEmulator" description="allows a clean build, and then launches the emulator" depends="Clean, enableEmulator, disableObfuscator, BuildPolish" />

	<!-- Main Target: Runs the build with all debug properties enabled -->
	<target name="LaunchEmulatorAndProfilers" description="debugs the project" depends="enableDebug, enableEmulator, BuildPolish" />
	
	<!-- Main Target: Builds project and runs j2mepolish Unit Tests on constructed jars -->
	<target name="RunJ2MEUnitTests" depends="disableObfuscator, BuildPolish" description="Runs j2mepolish Unit Tests on constructed jars">
		<!-- Note that most of this testing code was here to test our auto-integration tester, and isn't actually
	     	usable for testing J2ME code -->
		<!-- The classpath that should be used for tests -->
		<path id="classpath.test">
	      <pathelement location="${dir.dist}/${app.jarName}"/>
		  <!--pathelement location="${dir.test}" /-->
		  <pathelement location="${dir.lib}/j2meunit-javarosa.jar" />
		  <path refid="classpath.base" />
		</path>
	
		<RunTestSuite suite="org.javarosa.patient.test.SelectorTest"/>
		<!-- add new test suites here -->
		<fail if="testresult.global">Unit Tests Failed!</fail>
	</target>
	
	<target name="PrepareWebDemo">
		<delete dir="${dir.webdist}"/>
		<mkdir dir="${dir.webdist}"/>
		<copy todir="${dir.webdist}">
		  <fileset dir="${dir.weblib}">
		    <include name="*.jar"/>
		  	<include name="*.html"/>
		  </fileset>
		</copy>

		<javac srcdir="${dir.weblib}">
        	<classpath>
            	<pathelement location="${dir.weblib}/microemulator.jar"/>
	        	<pathelement location="${dir.weblib}/"/>
			</classpath>
		</javac>
		<java classname="PrepareMidlet">
			<arg value="${dir.dist}/${app.jarName}"/>
			<arg value="${dir.webdist}/${app.jarName}"/>
	        <classpath>
	            <pathelement location="${dir.weblib}/microemulator.jar"/>
	        	<pathelement location="${dir.weblib}/"/>
			</classpath>
		</java>
	</target>
	
	<property name="dir.postjad" value="./postjad" />
	
	<target name="PostJad" description="Post a jad file to commcare hq">
	    <taskdef name="py-run" onerror="report" classname="org.pyant.tasks.PythonRunTask" classpath="${dir.tools}/pyAntTasks-1.3.jar"/>
		<py-run script="${dir.postjad}/utilities/submit_build.py" />
	</target>

    <target name="BuildAndPostJad" depends="BuildServerExtras,PostJad" description="Build the jad and post it."/>

    <target name="BuildReleaseAndPostJad" depends="SetRelease,BuildServerExtras,PostJad" description="Build the jad and post it."/>

	<!-- This target should prevent us from needing to re-run BuildClean for additional targets -->
	<target name="BuildServerExtras" depends="BuildClean,PrepareWebDemo"/>
		
	<!-- Initialization for the build targets                    -->
	<target name="init" depends="extract-libs">	
		<!-- Disable the Emulator by default -->
		<property name="test" value="false" />
		
		<condition property="compile.from.source.true">
			<equals arg1="${compile.source}" arg2="true" />
		</condition>
	</target>

	<!-- for use primarily by the build server to extract the required 3rd-party libraries into the
	     commcare source tree. (see javarosa-core buildfile for details) -->
	<target name="extract-libs" if="cc.extract-libs-fresh">
		<unzip src="${commcare-deps}" dest="${dir.commcare-core}/org.commcare.core" overwrite="true" />
	</target>

	<target name="disableObfuscator">
		<property name="noobfuscate" value="true"/>
	</target>
	<!-- Sets the 'debug' ANT variable to true -->
	<target name="enableDebug">
		<property name="debug" value="true" />
	</target>

	<!-- Enables the emulator by setting 'test' to be true, and setting a working directory -->
	<target name="enableEmulator">
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
	
	<!-- Macro: Runs a test suite, and sets testresult.global to be true on failure -->
	<macrodef name="RunTestSuite" description="Runs a test suite, and sets testresult.global to be true on failure">
		<attribute name="suite"/>
		<sequential>
			<!-- Note: The reason that we are using @{suite} as a property is because properties in ANT
			are immutable, and this is a unique identifier -->
		<java classname="j2meunit.textui.TestRunner" failonerror="false" fork="true" resultproperty="@{suite}">
							<classpath refid="classpath.test" />
							<arg value="@{suite}"/>
				</java>
		<condition property="testresult.global">
					<not>
						<equals arg1="${@{suite}}" arg2="0"/>
				 	</not>
				</condition>
		</sequential>
	</macrodef>
	
	<macrodef name="propertycopy">
	  <attribute name="name"/>
	  <attribute name="from"/>
	  <sequential>
	    <property name="@{name}" value="${@{from}}"/>
	  </sequential>
	</macrodef>
	
	<!-- import user specific properties                          -->
	<property file="${basedir}/build.properties" />

	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />
	
	<property name="TALK" value="true" />

</project>
